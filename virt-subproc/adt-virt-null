#!/usr/bin/python
#
# adt-virt-null is part of autopkgtest
# autopkgtest is a tool for testing Debian binary packages
#
# autopkgtest is Copyright (C) 2006-2007 Canonical Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# See the file CREDITS for a full list of credits information (often
# installed as /usr/share/doc/autopkgtest/CREDITS).

import sys
import os
import subprocess
from optparse import OptionParser

try:
    our_base = os.environ['AUTOPKGTEST_BASE'] + '/lib'
except KeyError:
    our_base = '/usr/share/autopkgtest/python'
sys.path.insert(1, our_base)

import VirtSubproc
capabilities = ['isolation-machine']


def parse_args():
    usage = "%prog [<options>]"
    parser = OptionParser(usage=usage)

    parser.add_option('-d', '--debug', action='store_true')

    (opts, args) = parser.parse_args()
    if len(args):
        parser.error("no arguments allowed")

    VirtSubproc.debuglevel = opts.debug

    if os.getuid() == 0:
        capabilities.append('root-on-testbed')

    VirtSubproc.down = []
    VirtSubproc.downkind = 'auxverb'


def hook_open():
    pass


def hook_downtmp():
    global capabilities

    d = VirtSubproc.downtmp_mktemp()
    capabilities.append('downtmp-host=' + d)
    return d


def hook_cleanup():
    global capabilities

    VirtSubproc.downtmp_remove()
    capabilities = [c for c in capabilities if not c.startswith('downtmp-host')]


def hook_forked_inchild():
    pass


def hook_capabilities():
    return capabilities


def hook_shell(stdin, stdout, stderr, dir):
    with open(stdin, 'rb') as sin:
        with open(stdout, 'wb') as sout:
            with open(stderr, 'wb') as serr:
                subprocess.call(['bash', '-i'], stdin=sin, stdout=sout,
                                stderr=serr, cwd=dir)


parse_args()
VirtSubproc.main()
