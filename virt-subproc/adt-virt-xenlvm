#!/usr/bin/python2.4
#
# adt-virt-xenlvm is part of autopkgtest
# autopkgtest is a tool for testing Debian binary packages
#
# autopkgtest is Copyright (C) 2006 Canonical Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# See the file CREDITS for a full list of credits information (often
# installed as /usr/share/doc/autopkgtest/CREDITS).

import sys
import os
import re as regexp
import string
from optparse import OptionParser

try: our_base = os.environ['AUTOPKGTEST_BASE']
except KeyError: our_base = '/usr/share/autopkgtest';
sys.path.insert(1, our_base+'/python')

import VirtSubproc as vsp

witholder = None

def parse_args():
	global debuglevel, xlargs, gain_root

	usage = "%prog <options> [-- <adt-xenlvm options>]"
	parser = OptionParser(usage=usage)
	pa = parser.add_option
	pe = parser.error

	pa('-r', '--gain-root', type='string', dest='gain_root');
	pa('-d', '--debug', action='store_true', dest='debug');

	(opts,xlargs) = parser.parse_args()
	vsp.debuglevel = opts.debug

	if opts.gain_root = None: gain_root = []
	else: gain_root = opts.gain_root.split()
	vsp.down = gain_root + ['adt-xenlvm-on-testbed'] + xlargs + ['--']

def hook_open():
	hook_cleanup()
	withholder = subprocess.Popen(
		gain_root + ['adt-xenlvm-with-testbed'] + xlargs +
		 ['--','sh','-ec','echo y; exec cat'],
		stdin=subprocess.PIPE, stdout=subprocess.PIPE )
	l = withholder.stdout.readline(2)
	rc = withholder.poll()
	if rc is not None:
		withholder.stdin.close()
		withholder.stdout.close()
		withholder = None
		bomb("with-testbed failed, code %d" % rc)
	if l != "y\n":
		bomb("with-testbed sh gave wrong output `%s', not `l'"
			% l.rstrip("\n"))
	downtmp = '/root/adt-downtmp'
	vsp.execute('mkdir %s' % downtmp, downp=True)
	return downtmp

def hook_stop():
	withholder.stdin.close()
	withholder.stdout.close()
	rc = withholder.wait()
	withholder = None
	if rc: bomb("with-testbed failed at shutdown, code %d" % rc)

def hook_cleanup():
	if withholder is not None:
		withholder.stdin.close()
		withholder.stdout.close()
		rc = withholder.wait()
		withholder = None
		if rc: print >>sys.stderr, (
			"with-testbed failed during cleanup, code %d" % rc)

def hook_capabilities():
	return ('revert','root-on-testbed','suggest-normal-user=adtxenu')

parse_args()
vsp.main()
